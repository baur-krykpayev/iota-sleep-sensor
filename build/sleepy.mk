DOXYGEN_PROJECT_NAME = Sleepy Sensor

TARGET_NAME := Sleepy

# Define statements for the entire targe. These will be passed to the C and C++ compilers
DEFINES += USE_STDPERIPH_DRIVER
LIBS = Periph
LSCRIPT = sleepy.ld

# Source files
SRC += main.c

#Directories that compiler should look for header files
INCLUDE_DIRS +=

SILENCE = @

OBJS_DIR = bin/$(TARGET_NAME)
OPTIMIZE_FLAGS = -Os

# Stores the target name in the image
DEFINES += __TARGET_NAME__=$(TARGET_NAME)

# ATT!!! This must be updated every time you update GNU Tools for ARM Emb Processors!!
GNU_TOOLS_ARM_EMBEDDED_VERSION_STRING:=[ARM/embedded-4_8-branch revision 213147]

# Override predefined tools with ARM Cross Compiler tools
# C Compiler
CC = arm-none-eabi-gcc

# C++ Compiler
CXX = arm-none-eabi-gcc

# Assembler
AS = arm-none-eabi-gcc

# Linker
LD = arm-none-eabi-g++

# Archiver
AR = arm-none-eabi-ar

OC = arm-none-eabi-objcopy
OD = arm-none-eabi-objdump
SIZE = arm-none-eabi-size

GNU_TOOLS_VERSION_STR = $(shell $(CC) --version)

# If words 11-13 of the version output match the required version, the version is correct
ifeq ("$(wordlist 11, 13, $(GNU_TOOLS_VERSION_STR))","$(GNU_TOOLS_ARM_EMBEDDED_VERSION_STRING)")
$(info $(wordlist 2, 13, $(GNU_TOOLS_VERSION_STR)) has been detected)
# Otherwise, the version is invalid
else
$(warning Warning: An invalid version of the GNU Tools for ARM Embedded Processors has been detected)
$(info Detected version: $(wordlist 11, 13, $(GNU_TOOLS_VERSION_STR)))
$(info Required version: $(GNU_TOOLS_ARM_EMBEDDED_VERSION_STRING))
endif

#Helper Functions
get_src_from_dir = $(wildcard $1/*.cpp) $(wildcard $1/*.c)
get_dirs_from_dirspec = $(wildcard $1)
get_src_from_dir_list = $(foreach dir, $1, $(call_get_src_from_dir,$(dir)))
__src_to = $(subst .c,$1, $(subst .cpp,$1, $(subst .S,$1,$2)))
src_to = $(addprefix $(OBJS_DIR/,$(call __src_to,$1,$2))
src_to_o = $(call src_to,.o,$1)
src_to_obj = $(call src_to,.obj,$1)
src_to_d = $(call src_to,.d,$1)
debug_print_list = $(foreach word,$1,echo " $(word)";) echo;

# Convert include paths to a compiler to switch
INCLUDES_DIRS_EXPANDED = $(call_get_dirs_from_dirspec, $(INCLUDE_DIRS))
INCLUDES += $(foreach dir, $(INCLUDES_DIRS_EXPANDED), -I$(dir))

LD_LIBRARIES = -L$(LIB_DIR) $(foreach lib, $(LIBS), -l$(lib))
LIB_NAMES = $(foreach lib, $(LIBS), $(LIB_DIR)/lib$(lib).a)

# Populate the object and dependancy varaibles from the provided sources
OBJ = $(call src_to_o, $(SRC))
DEP = $(call src_to_d, $(SRC))

# Compiler architecture flags
ARCH_FLAGS = -mthumb -mcpu=cortex-m4

# Build compiler flags
# C/C++ Pre-processor flags
CPPFLAGS = $(ARCH_FLAGS) $INCLUDES $(foreach def, $(DEFINES), -D$(def)) \
	-ffunction-sections -fdata-sections -ffreestanding \
	-Wall -Wextra -Wshadow -Wswitch-default

# C Compiler flags
CFLAGS = -std=gnu99 -g $(OPTIMIZE_FLAGS) -Wcast-qual -Wwrite-strings

#C++ Compiler flags
CXXFLAGS = -g $(OPTIMIZE_FLAGS) -fno-threadsafe-statistics -fno-rtti -fno-exceptions

# Assembler flags
ASFLAGS = $(ARCH_FLAGS) -g -Wa,--warn -x assembler-with-cpp -c
#Linker flags
LDFLAGS = $(ARCH_FLAGS) -Tbuild/$(LSCRIPT) -Wl,--gc-sections \
	-Wl,-Map,$(OBJS_DIR)/$(TARGET_NAME).map --specs=nano.specs \
	--specs=rdimon.specs -lrdimon

# if we are not cleaning all the things, include the dependancy files for incremental build purposes.
# This prevents already up to date objects from being rebuilt
ifneq "$(MAKECMDGOALS)" "clean"
-include $(DEP)
endif

# This instrucs make not to delete any files generated by the build. Otherwise object and dependancy
# files are considered intermediate files and are deleted after the build runs successfully
.SECONDARY

.PHONY: all
all: $(OBJ) $(OBJS_DIR)/$(TARGET_NAME).elf $(OBJS_DIR)/$(TARGET_NAME).s19 $(OBJS_DIR)/$(TARGET_NAME)_obj_sizes.txt

.PHONE: lib
lib: $(LIB_DIR)/$(TARGET_NAME).a

.PHONY: clean
clean:
	@echo Cleaning $(TARGET_NAME)...
	$(SILENCE)$(RM) -r $(OBJS_DIR)
	$(SILENCE)$(RM) $(LIB_DIR)/$(TARGET_NAME).a
	 
#Pattern targets here
$(OBJS_DIR)/%.lst: $(OBJS_DIR)/%.elf
	@echo Generating list file for $(notdir $<)
	$(SILENCE)$(OD) -d -S $(OBJ) $< > $@

$(OBJS_DIR)/%_obj_sizes.txt: $(OBJS_DIR)/%.elf
	@echo Generating simplified mapfile for $(notdir $<)
	$(SILENCE)$(SIZE) $(OBJ) $< > $@
	@echo Total size information:
	$(SILENCE)$(SIZE) $<
	
$(OBJS_DIR)/%.s19: $(OBJS_DIR)/%.elf
	@echo Generating S-record for $(notdir $<)
	$(SILENCE)$(OC) -O srec $< $@

$(OBJS_DIR)/%.elf: $(OBJ)
	@echo Linking $(notdir $@)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(LINK.o) -o $@ $^ $(LD_LIBRARIES)
	
$(LIB_DIR)/%.elf: $(OBJ)
	@echo Linking $(notdir $@)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(AR) $(ARFLAGS) $@ $^

$(OBJS_DIR)/%.o: %.cpp
	@echo Compiling $(notdir $<)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(COMPILE.CPP) -MMD -MP $(OUTPUT_OPTION) $< $(REDIRECT_OPTION)
	$(SILENCE)$(OD) -d -S $@ > $(@:.o=.lst)

$(OBJS_DIR)/%.o: %.c
	@echo Compiling $(notdir $<)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(COMPILE.c) -MMD -MP $(OUTPUT_OPTION) $< $(REDIRECT_OPTION)
	$(SILENCE)$(OD) -d -S $@ > $(@:.o=.lst)
	
	$(OBJS_DIR)/%.o: %.S
	@echo Compiling $(notdir $<)
	$(SILENCE)mkdir -p $(dir $@)
	$(SILENCE)$(AS) $(ASFLAGS) -MMD -MP $(OUTPUT_OPTION) $< $(REDIRECT_OPTION)
	$(SILENCE)$(OD) -d -S $@ > $(@:.o=.lst)



